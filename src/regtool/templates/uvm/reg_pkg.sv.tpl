// UVM Register package: ${name}
// Generated by regtool

package ${name}_reg_pkg;
    import uvm_pkg::*;
    `include "uvm_macros.svh"

    // Register definitions
{% for register in registers %}
    class ${register.name.lower()}_reg_c extends uvm_reg;
    {% for field in register.fields %}
        rand uvm_reg_field ${field.name.lower()};
    {% endfor %}

        `uvm_object_utils(${register.name.lower()}_reg_c)

        function new(string name = "${register.name.lower()}_reg_c");
            super.new(name, ${register.width}, UVM_NO_COVERAGE);
        endfunction

        virtual function void build();
        {% for field in register.fields %}
            ${field.name.lower()} = uvm_reg_field::type_id::create("${field.name.lower()}");
            ${field.name.lower()}.configure(this, ${field.width}, ${field.lsb}, "${field.swaccess}", 0,
                                          ${field.reset}, 1, 1, 1);
        {% endfor %}
        endfunction
    endclass
{% endfor %}

    // Register block
    class ${name}_reg_block extends uvm_reg_block;
    {% for register in registers %}
        rand ${register.name.lower()}_reg_c ${register.name.lower()};
    {% endfor %}

        `uvm_object_utils(${name}_reg_block)

        function new(string name = "${name}_reg_block");
            super.new(name, UVM_NO_COVERAGE);
        endfunction

        virtual function void build();
            default_map = create_map("default_map", 0, ${reg_dw}/8, UVM_LITTLE_ENDIAN);

        {% for register in registers %}
            ${register.name.lower()} = ${register.name.lower()}_reg_c::type_id::create("${register.name.lower()}");
            ${register.name.lower()}.configure(this);
            ${register.name.lower()}.build();
            default_map.add_reg(${register.name.lower()}, 'h${"%x" % register.offset});
        {% endfor %}
        endfunction
    endclass
endpackage