// UVM Register package: uart
// Generated by regtool

package uart_reg_pkg;
    import uvm_pkg::*;
    `include "uvm_macros.svh"

    // Register definitions
    class ctrl_reg_c extends uvm_reg;
        rand uvm_reg_field en;
        rand uvm_reg_field parity;

        `uvm_object_utils(ctrl_reg_c)

        function new(string name = "ctrl_reg_c");
            super.new(name, 2, UVM_NO_COVERAGE);
        endfunction

        virtual function void build();
            en = uvm_reg_field::type_id::create("en");
            en.configure(this, 1, 0, "", 0,
                                          0, 1, 1, 1);
            parity = uvm_reg_field::type_id::create("parity");
            parity.configure(this, 1, 1, "", 0,
                                          0, 1, 1, 1);
        endfunction
    endclass

    class status_reg_c extends uvm_reg;
        rand uvm_reg_field txfull;
        rand uvm_reg_field rxempty;

        `uvm_object_utils(status_reg_c)

        function new(string name = "status_reg_c");
            super.new(name, 2, UVM_NO_COVERAGE);
        endfunction

        virtual function void build();
            txfull = uvm_reg_field::type_id::create("txfull");
            txfull.configure(this, 1, 0, "", 0,
                                          0, 1, 1, 1);
            rxempty = uvm_reg_field::type_id::create("rxempty");
            rxempty.configure(this, 1, 1, "", 0,
                                          0, 1, 1, 1);
        endfunction
    endclass

    class data_reg_c extends uvm_reg;
        rand uvm_reg_field value;

        `uvm_object_utils(data_reg_c)

        function new(string name = "data_reg_c");
            super.new(name, 8, UVM_NO_COVERAGE);
        endfunction

        virtual function void build();
            value = uvm_reg_field::type_id::create("value");
            value.configure(this, 8, 0, "", 0,
                                          0, 1, 1, 1);
        endfunction
    endclass


    // Register block
    class uart_reg_block extends uvm_reg_block;
        rand ctrl_reg_c ctrl;
        rand status_reg_c status;
        rand data_reg_c data;

        `uvm_object_utils(uart_reg_block)

        function new(string name = "uart_reg_block");
            super.new(name, UVM_NO_COVERAGE);
        endfunction

        virtual function void build();
            default_map = create_map("default_map", 0, 32/8, UVM_LITTLE_ENDIAN);

            ctrl = ctrl_reg_c::type_id::create("ctrl");
            ctrl.configure(this);
            ctrl.build();
            default_map.add_reg(ctrl, 'h0);
            status = status_reg_c::type_id::create("status");
            status.configure(this);
            status.build();
            default_map.add_reg(status, 'h4);
            data = data_reg_c::type_id::create("data");
            data.configure(this);
            data.build();
            default_map.add_reg(data, 'h8);
        endfunction
    endclass
endpackage
