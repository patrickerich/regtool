// Register block: uart
// Generated by regtool

module uart_reg_block #(
    parameter int AW = 32,
    parameter int DW = 32
) (
    input                    clk_i,
    input                    rst_ni,
    
    // Register interface
    input                    reg_we_i,
    input                    reg_re_i,
    input        [AW-1:0]    reg_addr_i,
    input        [DW-1:0]    reg_wdata_i,
    output logic [DW-1:0]    reg_rdata_o,
    output logic             reg_error_o
);

    // CTRL Register
    logic [DW-1:0] ctrl_q;
    logic ctrl_we;
    
    // STATUS Register
    logic [DW-1:0] status_q;
    

    // Register write enables
    assign ctrl_we = reg_we_i && (reg_addr_i == 'h0);

    // Sequential write logic
    always_ff @(posedge clk_i or negedge rst_ni) begin
        if (!rst_ni) begin
            ctrl_q <= '0;
        end else if (ctrl_we) begin
            ctrl_q <= reg_wdata_i;
        end
    end

    // Register read logic
    always_comb begin
        reg_rdata_o = '0;
        reg_error_o = 1'b0;
        
        case (reg_addr_i)
            'h0: reg_rdata_o = ctrl_q;
            'h4: reg_rdata_o = status_q;
            default: reg_error_o = 1'b1;
        endcase
    end

endmodule